#+STARTUP: inlineimages

* AwsSsoConfigGenerator

Tool to generate an AWS config file (~​~/.aws/config~) (our file is saved to ~​~/.aws/config.generated~) after authenticating and authorizing AWS SSO IAM Identity Center.

** Downloads

Available downloads for macOS (x86 and m series), linux (x86 and arm64) and windows.

*** macOS

On macOS you will get a popup if you run without doing the below.

~Apple could not verify “aws-sso-config-generator” is free of malware that may harm your Mac or compromise your privacy.~

#+caption: macOS Apple popup could not verify
[[file:./images/macos-popup.png]]

**** Allow executable to not be quarantined

Make sure to only do this for verified executable downloaded from https://github.com/djgoku/aws-sso-config-generator or built locally.

#+begin_example
xattr -dr com.apple.quarantine ~/aws-sso-config-generator
chmod +x ~/aws-sso-config-generator
#+end_example

More information here https://apple.stackexchange.com/a/436677

** Usage
*Note: if no parameters are passed user will be prompted for ~region~ and ~start_url~.*

Example call of ~aws-sso-config-generator~ where AWS access portal is in ~us-west-2~ with a url of ~https://​<example>.awsapps.com/start/#/~.

#+begin_example
aws-sso-config-generator --region us-west-2 --sso-region us-east-1 --start-url https://<example>.awsapps.com/start/#/
#+end_example

#+begin_example
aws-sso-config-generator -r us-west-2 --sso-region us-east-1 -u https://<example>.awsapps.com/start/#/
#+end_example

** Parameters

| Option               | Type   | Example                                   | Description                                                       | Default                     |
|----------------------+--------+-------------------------------------------+-------------------------------------------------------------------+-----------------------------|
| --sso-region       | string | --sso-region us-west-2                    | Region where AWS resources are hosted.                            |                             |
| --region or -r     | string | -r us-west-2                              | Region where AWS access portal is hosted.                         |                             |
| --start-url or -u  | string | -u https://<example>.awsapps.com/start/#/ | The URL for the AWS access portal                                 |                             |
| --help or -h       | N/A    | -h                                        | Help menu                                                         |                             |
| --template or -t   | string | -t ~/.aws/config.template.json            | JSON template file to re-kap accounts and roles                   | ~/.aws/config.template.json |
| --out or -o        | string | -o ~/.aws/config.generated                | Output file for generated AWS config file                         | ~/.aws/config.generated     |
| --sso-session-name | string | --sso-session-name my-sso                 | SSO Session name used in IAM Identity Center config (non-legacy). | my-sso                      |
| --device-code      | N/A    | --device-code                             | Will use the device code XXX-XXX instead of PKCE                  |                             |

** Example IAM Identity Center Config (~/.aws/config.generated)

More about this config type: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html

~/.aws/config.generated:
#+name: ~/.aws/config.generated
#+begin_example
# config generated via https://github.com/djgoku/aws-sso-config-generator
#
# This requires AWS CLI v2
#
# 1. log into aws sso via `aws sso login --profile use-any-profile-name`
# 2. validate `AWS_PROFILE=use-any-profile-name aws sts get-caller-identity`

# AWS_CONFIG_FILE=~/.aws/config.generated AWS_PROFILE=1111111-ReadOnly aws sts get-caller-identity
[profile 1111111-ReadOnly]
sso_session = my-sso
sso_account_id = 1111111
sso_role_name = ReadOnly
region = us-west-2
output = json

# AWS_CONFIG_FILE=~/.aws/config.generated AWS_PROFILE=1111111-ReadOnly aws sts get-caller-identity
[profile 1111111-ReadOnly]
sso_session = my-sso
sso_account_id = 1111111
sso_role_name = ReadOnly
region = us-west-2
output = json

[sso-session my-sso]
sso_region = us-east-2
sso_start_url = https://<example>.awsapps.com/start/#/
sso_registration_scopes = sso:account:access
#+end_example

** Example Legacy Config (~/.aws/config.generated-legacy)

~/.aws/config.generated:
#+name: ~/.aws/config.generated
#+begin_example
# config generated via https://github.com/djgoku/aws-sso-config-generator
#
# This requires AWS CLI v2
#
# 1. log into aws sso via `aws sso login --profile use-any-profile-name`
# 2. validate `AWS_PROFILE=use-any-profile-name aws sts get-caller-identity`

# AWS_CONFIG_FILE=~/.aws/config.generated-legacy AWS_PROFILE=1111111-ReadOnly aws sts get-caller-identity
[profile 1111111-ReadOnly]
sso_start_url = https://<example>.awsapps.com/start/#/
sso_region = us-east-2
sso_account_id = 1111111
sso_role_name = ReadOnly
region = us-west-2
output = json

# AWS_CONFIG_FILE=~/.aws/config.generated-legacy AWS_PROFILE=1111111-ReadOnly aws sts get-caller-identity
[profile 1111111-ReadOnly]
sso_start_url = https://<example>.awsapps.com/start/#/
sso_region = us-east-2
sso_account_id = 1111111
sso_role_name = ReadOnly
region = us-west-2
output = json
#+end_example

** Example JSON Template (~/.aws/config.template.json)

In the =template.json= structure, the values under the =accounts= and =roles= keys are used to replace their respective keys during config generation. For example:
- ="111111"= in =accounts= will be replaced with ="dev"=
- ="Admin"= in =roles= will be replaced with =""= (empty string)

~/.aws/config.template:
#+name: ~/.aws/config.template
#+begin_example
{
  "accounts": {
    "111111": "dev",
    "222222": "uat",
    "333333": "prod"
  },
  "roles": {
    "Admin": "",
    "ReadOnly": "read"
  }
}
#+end_example

** Development

1. Clone repository
2. ~devbox run do-all~

** FAQ

*** Why am I seeing an old version of an aws-sso-config-generator?

You might need to clean-up old resources from a previous version and re-run the application.

#+begin_example
./burrito_out/aws_sso_config_generator maintenance uninstall
[w] This will uninstall the application runtime for this Burrito binary!
[?] Please confirm this action [y/n]: y
y
[i] Deleting directory: /home/devbox/.local/share/.burrito/aws_sso_config_generator_erts-15.2.2_0.1.0
[i] Uninstall complete!
[i] Quitting.
#+end_example

*** How do these binaries work?

We are using [[https://github.com/burrito-elixir/burrito][burrito]] which packages everything required to run the application into a self-extracting executable. Once ran the application is extracted and then ran.

** References
*** Elixir
- https://github.com/burrito-elixir/burrito
- https://github.com/aws-beam/aws-elixir

*** Other
- https://github.com/jetify-com/devbox
- https://stackoverflow.com/a/71850591
- https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/Welcome.html
